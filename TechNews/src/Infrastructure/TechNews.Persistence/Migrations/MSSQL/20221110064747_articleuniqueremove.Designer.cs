// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechNews.Persistence;

#nullable disable

namespace TechNews.Persistence.Migrations.MSSQL
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221110064747_articleuniqueremove")]
    partial class articleuniqueremove
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TechNews.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("ArticleCategoryId");

                    b.HasIndex("ArticleSubCategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleCategoryId"), 1L, 1);

                    b.Property<string>("ArticleCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleCategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleSubCategory", b =>
                {
                    b.Property<int>("ArticleSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleSubCategoryId"), 1L, 1);

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ArticleSubCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleSubCategoryId");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("ArticleSubCategories");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.CaseStudies", b =>
                {
                    b.Property<int>("CaseStudiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseStudiesId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("CaseStudiesId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("CaseStudies");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Concerts"
                        },
                        new
                        {
                            CategoryId = new Guid("6313179f-7837-473a-a4d5-a5571b43e6a6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Musicals"
                        },
                        new
                        {
                            CategoryId = new Guid("bf3f3002-7e53-441e-8b76-f6280be284aa"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Plays"
                        },
                        new
                        {
                            CategoryId = new Guid("fe98f549-e790-4e9f-aa16-18c2292a2ee9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Conferences"
                        });
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<string>("ChapterTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PodcastId")
                        .HasColumnType("int");

                    b.HasKey("ChapterId");

                    b.HasIndex("PodcastId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("SectionMasterId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WebinarId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("WebinarId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("ee272f8b-6096-4cb6-8625-bb4bb2d89e8b"),
                            Artist = "John Egbert",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 5, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(4933),
                            Description = "Join John for his farwell tour across 15 continents. John really needs no introduction since he has already mesmerized the world with his banjo.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/banjo.jpg",
                            Name = "John Egbert Live",
                            Price = 65
                        },
                        new
                        {
                            EventId = new Guid("3448d5a4-0f72-4dd7-bf15-c14a46b26c00"),
                            Artist = "Michael Johnson",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 8, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(4965),
                            Description = "Michael Johnson doesn't need an introduction. His 25 concert across the globe last year were seen by thousands. Can we add you to the list?",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/michael.jpg",
                            Name = "The State of Affairs: Michael Live!",
                            Price = 85
                        },
                        new
                        {
                            EventId = new Guid("b419a7ca-3321-4f38-be8e-4d7b6a529319"),
                            Artist = "DJ 'The Mike'",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 3, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(4982),
                            Description = "DJs from all over the world will compete in this epic battle for eternal fame.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/dj.jpg",
                            Name = "Clash of the DJs",
                            Price = 85
                        },
                        new
                        {
                            EventId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b"),
                            Artist = "Manuel Santinonisi",
                            CategoryId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 3, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(4998),
                            Description = "Get on the hype of Spanish Guitar concerts with Manuel.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/guitar.jpg",
                            Name = "Spanish guitar hits with Manuel",
                            Price = 25
                        },
                        new
                        {
                            EventId = new Guid("1babd057-e980-4cb3-9cd2-7fdd9e525668"),
                            Artist = "Many",
                            CategoryId = new Guid("fe98f549-e790-4e9f-aa16-18c2292a2ee9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 9, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5013),
                            Description = "The best tech conference in the world",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/conf.jpg",
                            Name = "Techorama 2021",
                            Price = 400
                        },
                        new
                        {
                            EventId = new Guid("adc42c09-08c1-4d2c-9f96-2d15bb1af299"),
                            Artist = "Nick Sailor",
                            CategoryId = new Guid("6313179f-7837-473a-a4d5-a5571b43e6a6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 7, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5033),
                            Description = "The critics are over the moon and so will you after you've watched this sing and dance extravaganza written by Nick Sailor, the man from 'My dad and sister'.",
                            ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/GloboTicket/musical.jpg",
                            Name = "To the Moon and Back",
                            Price = 135
                        });
                });

            modelBuilder.Entity("TechNews.Domain.Entities.EventSchedule", b =>
                {
                    b.Property<int>("EventScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventScheduleId"), 1L, 1);

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTopic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventScheduleId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("EventSchedules");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.GuestUser", b =>
                {
                    b.Property<int>("GuestUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestUserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuestUserId");

                    b.ToTable("GuestUsers");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.LiveInterview", b =>
                {
                    b.Property<int>("LiveInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiveInterviewId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("LiveInterviewId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("LiveInterviews");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Magazine", b =>
                {
                    b.Property<int>("MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MagazineId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("MagazineId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Magzines");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("253c75d5-32af-4dbf-ab63-1af449bde7bd"),
                            Code = "1",
                            Language = "en",
                            MessageContent = "{PropertyName} is required.",
                            Type = "Error"
                        },
                        new
                        {
                            MessageId = new Guid("ed0cc6b6-11f4-4512-a441-625941917502"),
                            Code = "2",
                            Language = "en",
                            MessageContent = "{PropertyName} must not exceed {MaxLength} characters.",
                            Type = "Error"
                        },
                        new
                        {
                            MessageId = new Guid("fafe649a-3e2a-4153-8fd8-9dcd0b87e6d8"),
                            Code = "3",
                            Language = "en",
                            MessageContent = "An event with the same name and date already exists.",
                            Type = "Error"
                        });
                });

            modelBuilder.Entity("TechNews.Domain.Entities.NewsLetter", b =>
                {
                    b.Property<int>("NewsLetterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsLetterId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsLetterId");

                    b.ToTable("NewsLetter");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OrderPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderTotal")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e94bc5b-71a5-4c8c-bc3b-71bb7976237e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5052),
                            OrderTotal = 400,
                            UserId = new Guid("a441eb40-9636-4ee6-be49-a66c5ec1330b")
                        },
                        new
                        {
                            Id = new Guid("86d3a045-b42d-4854-8150-d6a374948b6e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5070),
                            OrderTotal = 135,
                            UserId = new Guid("ac3cfaf5-34fd-4e4d-bc04-ad1083ddc340")
                        },
                        new
                        {
                            Id = new Guid("771cca4b-066c-4ac7-b3df-4d12837fe7e0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5086),
                            OrderTotal = 85,
                            UserId = new Guid("d97a15fc-0d32-41c6-9ddf-62f0735c4c1c")
                        },
                        new
                        {
                            Id = new Guid("3dcb3ea0-80b1-4781-b5c0-4d85c41e55a6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5100),
                            OrderTotal = 245,
                            UserId = new Guid("4ad901be-f447-46dd-bcf7-dbe401afa203")
                        },
                        new
                        {
                            Id = new Guid("e6a2679c-79a3-4ef1-a478-6f4c91b405b6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5115),
                            OrderTotal = 142,
                            UserId = new Guid("7aeb2c01-fe8e-4b84-a5ba-330bdf950f5c")
                        },
                        new
                        {
                            Id = new Guid("f5a6a3a0-4227-4973-abb5-a63fbe725923"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5132),
                            OrderTotal = 40,
                            UserId = new Guid("f5a6a3a0-4227-4973-abb5-a63fbe725923")
                        },
                        new
                        {
                            Id = new Guid("ba0eb0ef-b69b-46fd-b8e2-41b4178ae7cb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPaid = true,
                            OrderPlaced = new DateTime(2022, 11, 10, 6, 47, 46, 238, DateTimeKind.Utc).AddTicks(5146),
                            OrderTotal = 116,
                            UserId = new Guid("7aeb2c01-fe8e-4b84-a5ba-330bdf950f5c")
                        });
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Podcast", b =>
                {
                    b.Property<int>("PodcastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PodcastId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PodcastId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Querie", b =>
                {
                    b.Property<int>("QuerieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuerieId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MobileNumber")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuerieId");

                    b.HasIndex("CountryId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.SectionMaster", b =>
                {
                    b.Property<int>("SectionMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionMasterId"), 1L, 1);

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalViews")
                        .HasColumnType("int");

                    b.HasKey("SectionMasterId");

                    b.ToTable("SectionMasters");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.StoredFile", b =>
                {
                    b.Property<int>("StoredFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoredFileId"), 1L, 1);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoredFileId");

                    b.HasIndex("SectionMasterId");

                    b.ToTable("StoredFiles");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Webinar", b =>
                {
                    b.Property<int>("WebinarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebinarId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalSeat")
                        .HasColumnType("int");

                    b.Property<int>("WebinarHolderId")
                        .HasColumnType("int");

                    b.HasKey("WebinarId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Webinars");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.WebinarHolder", b =>
                {
                    b.Property<int>("WebinarHolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebinarHolderId"), 1L, 1);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebinarId")
                        .HasColumnType("int");

                    b.HasKey("WebinarHolderId");

                    b.ToTable("WebinarHolders");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Youtube", b =>
                {
                    b.Property<int>("YouTubeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YouTubeId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("YoutubeVideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YouTubeId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Youtubes");
                });

            modelBuilder.Entity("WebinarWebinarHolder", b =>
                {
                    b.Property<int>("WebinarHoldersWebinarHolderId")
                        .HasColumnType("int");

                    b.Property<int>("WebinarsWebinarId")
                        .HasColumnType("int");

                    b.HasKey("WebinarHoldersWebinarHolderId", "WebinarsWebinarId");

                    b.HasIndex("WebinarsWebinarId");

                    b.ToTable("WebinarWebinarHolder");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Article", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.ArticleCategory", "ArticleCategory")
                        .WithOne("Articles")
                        .HasForeignKey("TechNews.Domain.Entities.Article", "ArticleCategoryId");

                    b.HasOne("TechNews.Domain.Entities.ArticleSubCategory", "ArticleSubCategory")
                        .WithOne("Articles")
                        .HasForeignKey("TechNews.Domain.Entities.Article", "ArticleSubCategoryId");

                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Article")
                        .HasForeignKey("TechNews.Domain.Entities.Article", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleCategory");

                    b.Navigation("ArticleSubCategory");

                    b.Navigation("Country");

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleSubCategory", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany()
                        .HasForeignKey("ArticleCategoryId");

                    b.Navigation("ArticleCategory");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.CaseStudies", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("CaseStudies")
                        .HasForeignKey("TechNews.Domain.Entities.CaseStudies", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Podcast", "Podcast")
                        .WithMany("Chapters")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.City", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Comment", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithMany("Comments")
                        .HasForeignKey("SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Webinar", "Webinar")
                        .WithMany("Enrollments")
                        .HasForeignKey("WebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Webinar");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Event", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.EventSchedule", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("EventSchedule")
                        .HasForeignKey("TechNews.Domain.Entities.EventSchedule", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.LiveInterview", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("LiveInterview")
                        .HasForeignKey("TechNews.Domain.Entities.LiveInterview", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Magazine", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Magzine")
                        .HasForeignKey("TechNews.Domain.Entities.Magazine", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Podcast", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Podcast")
                        .HasForeignKey("TechNews.Domain.Entities.Podcast", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Querie", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.State", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.StoredFile", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithMany("StoredFiles")
                        .HasForeignKey("SectionMasterId");

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.User", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TechNews.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TechNews.Domain.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Webinar", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Webinar")
                        .HasForeignKey("TechNews.Domain.Entities.Webinar", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Youtube", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Youtube")
                        .HasForeignKey("TechNews.Domain.Entities.Youtube", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("WebinarWebinarHolder", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.WebinarHolder", null)
                        .WithMany()
                        .HasForeignKey("WebinarHoldersWebinarHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNews.Domain.Entities.Webinar", null)
                        .WithMany()
                        .HasForeignKey("WebinarsWebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleCategory", b =>
                {
                    b.Navigation("Articles")
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleSubCategory", b =>
                {
                    b.Navigation("Articles")
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Podcast", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.SectionMaster", b =>
                {
                    b.Navigation("Article")
                        .IsRequired();

                    b.Navigation("CaseStudies")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("EventSchedule")
                        .IsRequired();

                    b.Navigation("LiveInterview")
                        .IsRequired();

                    b.Navigation("Magzine")
                        .IsRequired();

                    b.Navigation("Podcast")
                        .IsRequired();

                    b.Navigation("StoredFiles");

                    b.Navigation("Webinar")
                        .IsRequired();

                    b.Navigation("Youtube")
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Webinar", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
