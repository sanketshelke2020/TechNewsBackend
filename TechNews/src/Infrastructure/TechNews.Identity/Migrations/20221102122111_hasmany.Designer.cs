// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechNews.Identity;

#nullable disable

namespace TechNews.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20221102122111_hasmany")]
    partial class hasmany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d1e60e98-a2fe-4101-beb3-2a531b3b1800",
                            ConcurrencyStamp = "359176f4-5ff4-46fc-9b3d-8c730cd720ae",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        },
                        new
                        {
                            Id = "2c1030ae-b4c7-4123-bb8d-0d7e40d66213",
                            ConcurrencyStamp = "a8592a46-5c54-4474-8822-295c5071fcbb",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("ArticleCategoryId")
                        .IsUnique();

                    b.HasIndex("ArticleSubCategoryId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Article");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleCategoryId"), 1L, 1);

                    b.Property<string>("ArticleCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleCategoryId");

                    b.ToTable("ArticleCategory");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleSubCategory", b =>
                {
                    b.Property<int>("ArticleSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleSubCategoryId"), 1L, 1);

                    b.Property<string>("ArticleSubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleSubCategoryId");

                    b.ToTable("ArticleSubCategory");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.CaseStudies", b =>
                {
                    b.Property<int>("CaseStudiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseStudiesId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("CaseStudiesId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("CaseStudies");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PodcastId")
                        .HasColumnType("int");

                    b.HasKey("ChapterId");

                    b.HasIndex("PodcastId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("SectionMasterId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WebinarId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("WebinarId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.EventSchedule", b =>
                {
                    b.Property<int>("EventScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventScheduleId"), 1L, 1);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventScheduleId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("EventSchedule");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.LiveInterview", b =>
                {
                    b.Property<int>("LiveInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiveInterviewId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("LiveInterviewId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("LiveInterview");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Magazine", b =>
                {
                    b.Property<int>("MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MagazineId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("MagazineId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Magazine");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Podcast", b =>
                {
                    b.Property<int>("PodcastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PodcastId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PodcastId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Podcast");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Querie", b =>
                {
                    b.Property<int>("QuerieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuerieId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MobileNumber")
                        .HasColumnType("float");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuerieId");

                    b.HasIndex("CountryId");

                    b.ToTable("Querie");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.SectionMaster", b =>
                {
                    b.Property<int>("SectionMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionMasterId"), 1L, 1);

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalViews")
                        .HasColumnType("int");

                    b.HasKey("SectionMasterId");

                    b.ToTable("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.StoredFile", b =>
                {
                    b.Property<int>("StoredFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoredFileId"), 1L, 1);

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<int?>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoredFileId");

                    b.HasIndex("SectionMasterId");

                    b.ToTable("StoredFile");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Webinar", b =>
                {
                    b.Property<int>("WebinarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebinarId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeat")
                        .HasColumnType("int");

                    b.Property<int>("WebinarHolderId")
                        .HasColumnType("int");

                    b.HasKey("WebinarId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Webinar");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.WebinarHolder", b =>
                {
                    b.Property<int>("WebinarHolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebinarHolderId"), 1L, 1);

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebinarId")
                        .HasColumnType("int");

                    b.HasKey("WebinarHolderId");

                    b.ToTable("WebinarHolder");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Youtube", b =>
                {
                    b.Property<int>("YouTubeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YouTubeId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionMasterId")
                        .HasColumnType("int");

                    b.HasKey("YouTubeId");

                    b.HasIndex("SectionMasterId")
                        .IsUnique();

                    b.ToTable("Youtube");
                });

            modelBuilder.Entity("TechNews.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TechNews.Identity.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TechNews.Identity.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("WebinarWebinarHolder", b =>
                {
                    b.Property<int>("WebinarHoldersWebinarHolderId")
                        .HasColumnType("int");

                    b.Property<int>("WebinarsWebinarId")
                        .HasColumnType("int");

                    b.HasKey("WebinarHoldersWebinarHolderId", "WebinarsWebinarId");

                    b.HasIndex("WebinarsWebinarId");

                    b.ToTable("WebinarWebinarHolder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TechNews.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TechNews.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNews.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TechNews.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Article", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.ArticleCategory", "ArticleCategory")
                        .WithOne("Articles")
                        .HasForeignKey("TechNews.Domain.Entities.Article", "ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNews.Domain.Entities.ArticleSubCategory", "ArticleSubCategory")
                        .WithOne("Articles")
                        .HasForeignKey("TechNews.Domain.Entities.Article", "ArticleSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany("Articles")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Article")
                        .HasForeignKey("TechNews.Domain.Entities.Article", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleCategory");

                    b.Navigation("ArticleSubCategory");

                    b.Navigation("Country");

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.CaseStudies", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("CaseStudies")
                        .HasForeignKey("TechNews.Domain.Entities.CaseStudies", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Podcast", "Podcast")
                        .WithMany("Chapters")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Comment", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithMany("Comments")
                        .HasForeignKey("SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Webinar", "Webinar")
                        .WithMany("Enrollments")
                        .HasForeignKey("WebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Webinar");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.EventSchedule", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("EventSchedule")
                        .HasForeignKey("TechNews.Domain.Entities.EventSchedule", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.LiveInterview", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("LiveInterview")
                        .HasForeignKey("TechNews.Domain.Entities.LiveInterview", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Magazine", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Magzine")
                        .HasForeignKey("TechNews.Domain.Entities.Magazine", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Podcast", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Podcast")
                        .HasForeignKey("TechNews.Domain.Entities.Podcast", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Querie", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany("Queries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.StoredFile", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithMany("StoredFiles")
                        .HasForeignKey("SectionMasterId");

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Webinar", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Webinar")
                        .HasForeignKey("TechNews.Domain.Entities.Webinar", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Youtube", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.SectionMaster", "SectionMaster")
                        .WithOne("Youtube")
                        .HasForeignKey("TechNews.Domain.Entities.Youtube", "SectionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionMaster");
                });

            modelBuilder.Entity("TechNews.Identity.Models.ApplicationUser", b =>
                {
                    b.HasOne("TechNews.Identity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TechNews.Identity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("TechNews.Identity.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("RefreshTokens");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TechNews.Identity.Models.City", b =>
                {
                    b.HasOne("TechNews.Identity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("TechNews.Identity.Models.State", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebinarWebinarHolder", b =>
                {
                    b.HasOne("TechNews.Domain.Entities.WebinarHolder", null)
                        .WithMany()
                        .HasForeignKey("WebinarHoldersWebinarHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNews.Domain.Entities.Webinar", null)
                        .WithMany()
                        .HasForeignKey("WebinarsWebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleCategory", b =>
                {
                    b.Navigation("Articles")
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.ArticleSubCategory", b =>
                {
                    b.Navigation("Articles")
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Country", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Queries");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Podcast", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("TechNews.Domain.Entities.SectionMaster", b =>
                {
                    b.Navigation("Article")
                        .IsRequired();

                    b.Navigation("CaseStudies")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("EventSchedule")
                        .IsRequired();

                    b.Navigation("LiveInterview")
                        .IsRequired();

                    b.Navigation("Magzine")
                        .IsRequired();

                    b.Navigation("Podcast")
                        .IsRequired();

                    b.Navigation("StoredFiles");

                    b.Navigation("Webinar")
                        .IsRequired();

                    b.Navigation("Youtube")
                        .IsRequired();
                });

            modelBuilder.Entity("TechNews.Domain.Entities.Webinar", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
